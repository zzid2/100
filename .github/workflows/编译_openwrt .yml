#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: 编译OpenWrt                 ## Actions工作流的名称  GItHub搜索：OpenWrt-CI
on:
  repository_dispatch:             ## 储存库_调度
  workflow_dispatch:               ## 工作流程_调度
    inputs:
      ssh:                         ## 做判断时用的ID名称（可更改）  
        description: 'SSH远程'     ## 工作流_菜单提示框的名称
        required: false
        default: 'true-false'       ## 输入：true=开启 false=关闭
      wxtz:
        description: '微信通知'
        required: false
        default: 'wxtz'            ## 输入：wxtz=开启 false=关闭
      release:
        description: '发布固件'
        required: false
        default: 'release'         ## 输入：release=开启 actions=关闭
        
        
        
#  schedule:                        ## 定时触发开始编译(时间设置请看定时编译说明)
#    - cron: 30 8 */5 * *           ## 每间隔5天，在早上8.30执行


#  watch:                           ## 点☆Star触发开始编译
#    types: started


#  push:                            ## 修改任意代码（或指定文件） 触发编译
#    branches:                      ## 当分支代码出现“修改变动时” 触发编译
#      - master                     ## 默认是主分支代码变动时，触发编译

#    paths:                         ## 当指定文件“修改变动时” 触发编译
#      - 'diy.config'               ## 默认是diy.config文件变动时 触发编译


#  release:                         ## release发布触发开始编译(只是一个触发条件,不会发布的,又麻烦,没卵用,不用研究)
#    types: published



#-----------------------------------------------------------------------------------------------------------------
# # 单机型_各项配置开关
  # FIRMWARE_NAME: OpenWRT_x86                                       ## 微信推送变量名（固件名称不能含中文）
  # GITHUB_RELEASE: https://github.com/zuoweiid/10/releases          ## GitHub发布地址，修改成自己的
  # REPO_URL: https://github.com/coolsnowwolf/lede                   ## OpenWRT源码地址
  # REPO_BRANCH: master             ## ←源码分支
  # FEEDS_CONF: feeds.conf.default  ## 自定义feeds文件
  # CONFIG_FILE: .config            ## 自定义config配置       多机型配置文件如：(config/N1.config)
  # DIY_P1_SH: diy-part1.sh         ## 自定义脚本             多机型脚本文件如：(scripts/diy-part1.sh)
  # DIY_P2_SH: diy-part2.sh         ## 自定义脚本             多机型脚本文件如：(scripts/diy-part2.sh)
  #  ORGANIZE_FIRMWARE: false       ## 整理固件清除packages
  # UPLOAD_CONFIG: true             ## ←上传config配置文件
  # UPLOAD_FIRMWARE: true           ## ←上传固件到gitthub空间（默认必选true）
  # UPLOAD_BIN_DIR: true            ## ←上传bin文件夹到_github空间（固件+ipk）
  # UPLOAD_RELEASE: true            ## ←发布固件到_/releases主页
  # UPLOAD_COWTRANSFER: true        ## ←上传到_奶牛快传
  # UPLOAD_WETRANSFER: true         ## ←上传到_WeTransfer
  # EXTRACT_LINKS: true             ## 提取奶牛快传和WeTransfer链接
  # TZ: Asia/Shanghai               ## ←时区设置
  # REPO_TOKEN: ${{ secrets.REPO_TOKEN }}   ## GitHub令牌名称（用于发布固件）
  # SCKEY: ${{ secrets.SCKEY }}             ## ServerChan微信推送
#-----------------------------------------------------------------------------------------------------------------



env:
  TZ: Asia/Shanghai                      ## 时区设置
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  ## REPO_TOKEN === GitHub令牌密钥（用于发布固件）
  SCKEY: ${{ secrets.SCKEY }}            ## SCKEY      === 推送ID密钥    （用于微信推送）
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}      ## TELEGRAM_CHAT_ID   === TG电报群令牌
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  ## TELEGRAM_BOT_TOKEN === TG电报群密钥
  Author: ${{github.actor}}                              ## 提取 Github用户ID，如：zuoweiid
  GITURL: https://github.com/${{github.repository}}      ## 提取 项目仓库地址 = https://github.com +（用户ID + 项目仓库名字），如：zuoweiid/10    ${{github.repository}}=当前仓库
  Run_number: ${{github.run_number}}                     ## 提取 Actions当前运行编号，如#12



jobs:
  build:                                  ## 运行脚本的备注名称（可更改）
    runs-on: Ubuntu-20.04                 ## ←选择编译系统版本
    if: github.event.repository.owner.id == github.event.sender.id   ## 只有仓库所有者才能使用  “点 Star启动编译”
    
    
    name: 编译 ${{matrix.target}}         ## 多机型同时编译；“编译” 后面是选择编译的机型名称；如：“lede_x86”
    strategy:
      fail-fast: false
      matrix:
        target: [lede_N1,lede_x86]                ## ←编译指定机型 “就是文件夹名称”，多选用英文逗号隔开可以同时编译；
        # 目前可以选机型：openwrt,lede_G-DOCK,lede_hiwifi_HC5861,lede_linksys_Wrt32x,lede_N1,lede_x86

    
    steps:
    
    - name: 准备环境                      ## Checkout
      uses: actions/checkout@v4           ## 加载执行仓库：https://github.com/actions/checkout
      # uses: actions/setup-node@v4         ## 加载执行仓库，用于指定Node.js版本
      # with:
        # node-version: 20.x                ## 指定Node.js版本为：20.x
    
    
    
#-----------------------------------------------------------------------------------------------------------------
# 单机型_配置脚本 “settings.ini”
#REPO_URL="https://github.com/project-openwrt/openwrt"     #编译固件源码链接（请勿修改）
#REPO_BRANCH="openwrt-18.06"         #源码链接的分支（请勿修改）
#CONFIG_FILE=".config"               #配置文件（可SSH远程定制固件插件，也可在本地提取配置粘贴到此文件）
#WXFB_MESSAGE="project_x86_64"       #微信通知跟发布要用到的名字,比如通知你XX开始编译,发布的时候显示XX固件
#DIY_P1_SH="diy-1.sh"                #自定义文件1
#DIY_P2_SH="diy-2.sh"                #自定义文件2
#SSH_ACTIONS="false"                 #SSH远程配置固件（true=开启）（false=关闭）
#UPLOAD_BIN_DIR="false"              #上传【bin文件夹】到github空间（true=开启）（false=关闭）
#UPLOAD_CONFIG="true"                #上传【.config】配置文件到github空间（true=开启）（false=关闭）
#UPLOAD_FIRMWARE="true"              #上传固件到github空间（true=开启）（false=关闭）
#UPLOAD_COWTRANSFER="true"           #上传固件到【奶牛快传】（true=开启）（false=关闭）
#UPLOAD_WETRANSFER="true"            #上传固件到【WETRANSFER】（true=开启）（false=关闭）
#UPLOAD_RELEASE="false"              #发布固件（true=开启）（false=关闭）
#SERVERCHAN_SCKEY="false"            #微信通知（true=开启）（false=关闭）
#-----------------------------------------------------------------------------------------------------------------



    - name: 加载settings.ini脚本变量      ## 编译前加载 /build/机型文件夹/settings.ini 脚本
      run: |
        pwd && ls                                                                        # 显示当前步骤的路径和所有文件和文件夹；
        
        if [ -f "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini" ]; then      # 判断 优先加载 lede_x86/settings.ini 文件,其次加载 DIY/settings.ini 文件。
            source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        else
            cp -rf ${GITHUB_WORKSPACE}/build/DIY/settings.ini ${GITHUB_WORKSPACE}/build/${{matrix.target}}
            source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        fi
        
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV                                       # = 源码地址
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV                                 # = 项目分支
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV                                 # = .config配置文件
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV                                     # = DIY_P1_SH的变量
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV                                     # = DIY_P2_SH的变量
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV                                 # = 开关 SSH远程连接
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV                           # = 开关 上传Bin目录至github空间的变量
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV                             # = 开关 将“.config配置文件” 上传到github空间的变量
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV                         # = 开关 将“编译好的固件”    上传到github空间的变量
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV                   # = 开关 将“编译好的固件”    上传到奶牛快传的变量
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV                     # = 开关 将“编译好的固件”    上传到“WETRANSFER网盘”的变量
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV                           # = 开关 将“编译好的固件” 发布到仓库中
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV                       # = 开关 微信通知的变量
        
        ## 时间的变量
        echo "CangKu=${GITURL##*${Author}/}" >> $GITHUB_ENV                              # = 项目仓库名称的变量
        echo "date=$(date "+%Y.%m.%d-%H%M")" >> $GITHUB_ENV                              # = date 变量时间格式: 2021.01.02-1310           （上传至github空间的名称）
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV                    # = date1 变量时间格式: 2021年01月02号-13点10分 （Releases主页发布固件名称）
        echo "date2=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV                             # = date2 变量时间格式：2021.01.02-1310         （Tags左侧标签时间名称，与FILE_DATE对等）Tags显示
        
        ## 源码的变量
        if [ $REPO_URL == "https://github.com/coolsnowwolf/lede" ]; then                 # 当使用Lede源码时      变量：NAME2=Lede   ZUOZHE=lean
         echo "NAME2=Lede_" >> $GITHUB_ENV
         echo "ZUOZHE=lean" >> $GITHUB_ENV
        elif [ $REPO_URL == "https://github.com/Lienol/openwrt" ]; then                  # 当使用Lienol源码时    变量：NAME2=Lienol   ZUOZHE=lienol
         echo "NAME2=Lienol_" >> $GITHUB_ENV
         echo "ZUOZHE=lienol" >> $GITHUB_ENV
        elif [ $REPO_URL == "https://github.com/project-openwrt/openwrt" ]; then         # 当使用Project源码时   变量：NAME2=Project   ZUOZHE=CTCGFW
         echo "NAME2=Project_" >> $GITHUB_ENV
         echo "ZUOZHE=CTCGFW" >> $GITHUB_ENV
        elif [ $REPO_URL == "https://github.com/openwrt/openwrt" ]; then                 # 当使用官方源码时      变量：NAME2=Official
         echo "NAME2=Official_" >> $GITHUB_ENV
        fi
        
        
        
    - name: 准备编译_微信通知             ## Github设置里需添微信SCKEY
      uses: xhnmt/pushplus-action@v1.0.0  ## 加载执行仓库：hhttps://github.com/xhnmt/pushplus-action
      continue-on-error: true             ## 出错时继续执行
      if: env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')      ## 判断 SERVERCHAN_SCKEY 变量为“开启”则运行，否则跳过；继续判断 工作流调度菜单为 wxtz 时“开启”运行，否则跳过；
      with:
        token: ${{ secrets.SCKEY }}
        title: "编译[${{matrix.target}}]_${{env.CangKu}}仓库_#${{env.Run_number}}"
        content: "
              
              仓库名称：${{env.CangKu}}
              
              
              工作流号：#${{env.Run_number}}
              
              
              固件名称：${{matrix.target}}
              
              
              触发时间：${{env.date1}}"
              
              
              
## https://github.com/josStorer/get-current-time            获取当前时间
## https://github.com/marketplace/actions/pushplus-action
## https://github.com/xhnmt/pushplus-action



    # - name: 准备编译_微信通知             ## Github设置里需添微信SCKEY
      # uses: emon100/Action-Serverchan@v2  ## 加载执行仓库：https://github.com/emon100/Action-Serverchan
      # if: env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')
      # with:
        # SCKEY: ${{ secrets.SCKEY }}
        # text: 注意：${{env.CangKu}}仓库的#${{env.Run_number}}号[${{matrix.target}}]开始编译啦！
        # desp: 主人您要编译的[${{matrix.target}}]固件正在努力耕耘中,请耐心等待......
              
              
              # 仓库名称：${{env.CangKu}}
              
              
              # 工作流号：#${{env.Run_number}}
              
              
              # 固件名称：${{matrix.target}}
              
            
            
    - name: 安装编译环境                ## Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive      ## 非交互模式
      run: |
        pwd && ls                                                                        # 显示当前步骤的路径和所有文件和文件夹；
        
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y build-essential asciidoc binutils bzip2 gawk gettext git libc6-dev libncurses5 libtinfo-dev libtinfo5 ncurses-doc libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove -y --purge
        sudo -E apt-get -qq clean -y
        sudo timedatectl set-timezone "$TZ"            # 设置时区
        sudo mkdir -p /workdir                         # 在根目录下 新创建“workdir”目录，用于备份 openwrt 源码；
        sudo chown $USER:$GROUPS /workdir              # 提高“workdir”目录的权限
        sudo -E apt-get -qq install xz-utils btrfs-progs zip dosfstools uuid-runtime pigz         # N1固件打包必需要的依赖
        
        
        
    - name: 释放 Ubuntu 磁盘空间        ## Free Disk Space (Ubuntu) （预计释放31GB空间）
      uses: jlumbroso/free-disk-space@main             ## 加载执行仓库：https://github.com/jlumbroso/free-disk-space
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        
        
        
    - name: 下载${{matrix.target}}源码                 ## Clone source code
      working-directory: /workdir                      ## 指定 执行工作目录为新创建的“workdir”目录，Lede源码也存放在此下 /workdir/openwrt
      run: |
        pwd && ls                                                     # 显示当前步骤的路径和所有文件和文件夹；
        
        df -hT $PWD                                                   # 显示当前磁盘使用情况
        ## 翻译：  Size（总大小），Used（已用），Avail（可用），Use%（已使用百分比）
        ## 清理后   73G              21G            52G            29%
        
        git clone $REPO_URL -b $REPO_BRANCH openwrt                   # 下载源码，文件夹目录改为“openwrt”
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt             # 下载源码目录 /workdir/openwrt 强制建立软连接到 主仓库目录下 home/runner/work/仓库名称/仓库名称/openwrt 目录；
        
        cd openwrt                                                                      # 首次进入”软连接“源码 的执行目录“openwrt”
        
        if [ ${{matrix.target}} != openwrt ]; then                    # 当编译“openwrt”纯净机型时，先删除这些文件夹
          rm -rf package/lienol/luci-app-timecontrol
          rm -rf package/ntlf9t/{smartdns,luci-app-smartdns}
          rm -rf package/ctcgfw/{luci-app-argon-config,luci-theme-argonv3}
          rm -rf package/lean/{luci-app-netdata,luci-theme-argon,k3screenctrl}
        fi
        
        rm -rf {LICENSE,README,README.md}
        rm -rf ./*/{LICENSE,README,README.md}
        rm -rf ./*/*/{LICENSE,README,README.md}    # 删除无用说明
        
        
        
    - name: 清理缓存                           ## Cache                                    ## 清理缓存
      uses: klever1988/cachewrtbuild@main            ## 加载执行仓库：https://github.com/stupidloud/cachewrtbuild
      with:
          ccache: 'true'
          mixkey: 'x86'
          prefix: 'openwrt'
          
          
          
    - name: 加载DIY_1脚本                              ## Load custom feeds
      run: |
        pwd && ls                                      # 显示当前步骤的路径和所有文件和文件夹；
                
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt               # 复制当前 build “等所有文件（包含机型内所有DIY文件）” 至 openwrt目录下，
        
        cd openwrt                                                                                  # 后续执行命令默认进入：“openwrt”源码目录
        
        if [ -f "build/${{matrix.target}}/$DIY_P1_SH" ]; then                                       # 判断 优先加载 lede_x86/diy-part1 文件,其次加载 DIY/diy-part1 文件。
          chmod +x build/${{matrix.target}}/$DIY_P1_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P1_SH"
        else
          mv build/DIY/$DIY_P1_SH build/${{matrix.target}}
          chmod +x build/${{matrix.target}}/$DIY_P1_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P1_SH"
        
        fi
        
        
        
    - name: 加载DIY_2脚本                    ## Load custom configuration
      run: |
        pwd && ls                            # 显示当前步骤的路径和所有文件和文件夹；
        
        cd openwrt                           # 进入“openwrt”源码目录
        
        if [ -f "build/${{matrix.target}}/$DIY_P2_SH" ]; then                                      # 判断 优先加载 lede_x86/diy-part2 文件,其次加载 DIY/diy-part2 文件。
          chmod +x build/${{matrix.target}}/$DIY_P2_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P2_SH"
        else
          mv build/DIY/$DIY_P2_SH build/${{matrix.target}}
          chmod +x build/${{matrix.target}}/$DIY_P2_SH
          /bin/bash "build/${{matrix.target}}/$DIY_P2_SH"
        fi
        
        
        
        if [ -n "$(ls -A "build/${{matrix.target}}/diy" 2>/dev/null)" ]; then                      # 判断 优先复制 编译机型目录内的“diy”文件到openwrt源码内
            cp -rf build/${{matrix.target}}/diy/* ./
        else
            cp -rf build/DIY/diy/* ./ 
        fi
        
        if [ -n "$(ls -A "build/${{matrix.target}}/files" 2>/dev/null)" ]; then                    # 判断 优先复制 编译机型目录内的“files”文件到openwrt源码内
            cp -rf build/${{matrix.target}}/files files
            chmod -R 777 build/${{matrix.target}}/files/* ./
        else
            cp -rf build/DIY/files files
            chmod -R 777 build/${{matrix.target}}/files/* ./
            
        fi
        
        if [ -n "$(ls -A "build/${{matrix.target}}/patches" 2>/dev/null)" ]; then                  # 判断 优先复制 编译机型目录内的“patches”文件到openwrt源码内
            find "build/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        else
            find "build/DIY/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        fi
        
        if [ -f "build/${{matrix.target}}/$CONFIG_FILE" ]; then                                    # 判断 优先加载 lede_x86/.config 文件,其次加载 DIY/.config 文件。
            mv build/${{matrix.target}}/$CONFIG_FILE .config
        else
            cp -rf build/DIY/$CONFIG_FILE .config
        fi
        
        
        
    - name: SSH链接（到此预计10分钟）             ## SSH connection to Actions
      uses: P3TERX/ssh2actions@main               ## https://github.com/P3TERX/ssh2actions
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        
        
    - name: 上传SSH自定义.config配置文件              ## 上传到github空间
      uses: actions/upload-artifact@v4       ## https://github.com/actions/upload-artifact
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      with:
        name: SSH.config
        path: openwrt/.config
        
        
        
    - name: 下载DL库                             ## Download package
      id: package
      run: |
        pwd && ls                                # 显示当前步骤的路径和所有文件和文件夹；
        
        cd openwrt                               # 进入“openwrt”源码目录
        
        make defconfig                           # 自动生成.config文件
        make -j$(($(nproc)+1)) download V=s      # 全线程下载DL库
        
        find dl -size -1024c -exec ls -l {} \;   # 检查小于1KB文件
        find dl -size -1024c -exec rm -f {} \;   # 删除小于1KB文件
        
        make -j1 download V=s                    # 再次执行下载DL库
        
        
        
    - name: 开始编译固件                         ## Compile the firmware
      id: compile
      run: |
        pwd && ls                                # 显示当前步骤的路径和所有文件和文件夹；
        
        cd openwrt                               # 进入“openwrt”源码目录
                
        echo -e "CPU线程数：$(($(nproc)+1))   进行全线程编译..."     # 显示当前CPU线程数
        make -j$(($(nproc)+1)) V=s || make -j1 V=s                    # 首选全速线程编译，如果报错 再进行单线程编译排查错误！
        
        
        echo "status=success" >> $GITHUB_OUTPUT                       # 假如状态反馈成功，则输出到变量
        
        
        
        
        ## 根据.config配置文件判断变量
        DEVICE=$(egrep -o "CONFIG_TARGET.*DEVICE.*=y" .config | sed -r 's/.*(.*)=y/\0/')            # DEVICE  = 固件机型的变量（在.config配置文件中得出）
        DEVICE2=$(egrep -o "CONFIG_TARGET.*_64_Generic=y" .config | sed -r 's/.*(.*)=y/\0/')        # DEVICE2 = 固件平台的变量（在.config配置文件中得出）如：X86、
        if [ $DEVICE == "CONFIG_TARGET_x86_64_DEVICE_generic=y" ]; then                             # 当固件机型含generic时，输出变量=      小写generic = DEVICE 变量 /= NAME1 （固件平台“x86-64”）
         echo "NAME1=x86-64" >> $GITHUB_ENV
        elif [ $DEVICE2 == "CONFIG_TARGET_x86_64_Generic=y" ]; then                                 # 当固件机型含Generic时，输出变量=      大写Generic= DEVICE2 变量 /= NAME1 （固件平台“x86-64”）
         echo "NAME1=x86-64" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "lede_N1" -o ${{matrix.target}} == "Project_N1" ];then         # 当编译N1机型目录时，输出变量=          N1的执行判断 / NAME1 = “n1,Vplus,Beikeyun,L1Pro,S9xxx”
         echo "NAME1=n1,Vplus,Beikeyun,L1Pro,S9xxx" >> $GITHUB_ENV
        elif [ $DEVICE != "CONFIG_TARGET_x86_64_DEVICE_generic=y" ]; then                           # 没有“x86-64”时 = NAME1 /= “DEVICE_”字符后名称（如竞斗云：p2w_r619ac-128m）
         grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > NAME1
         [ -s NAME1 ] && echo "NAME1=$(cat NAME1)" >> $GITHUB_ENV
        fi                                                                                          # NAME1 = x86-64（与DEVICE_NAME变量对等=提取是“generic”）
        
        
        
    - name: 检查空间使用情况                     ## Check space usage
      if: (!cancelled())
      run: df -hT
        
        
        
    - name: 上传bin目录(打包_固件+ipk)              ## Upload bin directory
      uses: actions/upload-artifact@v4              ## https://github.com/actions/upload-artifact
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Bin_${{ env.NAME2 }}${{ env.NAME1 }}_${{ env.date }}     # 文件名称
        path: openwrt/bin   # 文件路径


    # - name: N1云脚本打包    # 将 Armvirt 打包为 OpenWrt
      # uses: ophub/flippy-openwrt-actions@main     ## https://github.com/ophub/flippy-openwrt-actions
      # env:
        # OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz     # N1编译固件路径
        # PACKAGE_SOC: s905d                                    # 盒子型号，默认只是N1
        # KERNEL_VERSION_NAME: 6.1.79                           # 内核版本
        # WHOAMI: huangqian8                                    # 作者著名，

        # https://github.com/ophub/flippy-openwrt-actions/blob/main/README.cn.md    # N1云脚本打包



    - name: 编译N1机型时,打包（N1、微加云、贝壳云、我家云、S9xxx）固件
      run: |
        pwd && ls                                               # 显示当前步骤的路径和所有文件和文件夹；
        
        
        ## 已删库
        if [ ${{matrix.target}} == "lede_N11" -o ${{matrix.target}} == "Project_N11" ];then                    # 当编译N1机型目录时，复制N1固件到打包目录下，
            git clone https://github.com/tuanqing/mknop reform
            cp openwrt/bin/targets/armvirt/*/*.tar.gz reform/openwrt                                         # 复制要打包的文件至 reform/openwrt 目录内
            
            cd reform
            sudo ./gen_openwrt -d -k latest                                                                  # 进入打包源码目录内，打包所有的固件！！！sudo ./gen_openwrt -d -k latest -m phicomm-n1      ## 只打包N1固件
            devices=("phicomm-n1" "rk3328" "s9xxx" "vplus")
            cd out
            for x in ${devices[*]}; do
                cd $x
                filename=$(ls | awk -F '.img' '{print $1}')
                gzip *.img
                cd ../
                echo "firmware_$x=$filename" >> $GITHUB_ENV
            done
            cd ../../
            mv -f reform/out/*/*.img.gz openwrt/bin/targets/armvirt/*                                        # 移动N1机型固件到默认bin目录下
        fi
        
        
        
        
        
        
        if [ ${{matrix.target}} == "lede_N1" -o ${{matrix.target}} == "Project_N1" ];then
            git clone https://github.com/wxfyes/N1packaging.git N1opt                                        ## 下载N1打包源码（与 openwrt、build 同一目录）
            
            ## N1打包“70+0核心”（推荐70+o稳定版）
            sudo chmod  -R 777 /opt
            find N1opt/70+o/opt/* -name "*kernel*" | xargs -i cp -r {} /opt
            cp openwrt/bin/targets/*/*/*.tar.gz /opt/kernel/openwrt-armvirt-64-default-rootfs.tar.gz
            cd /opt/kernel
            sudo chmod  -R 777 /opt
            sudo chmod +x *.sh
            sudo ./mk_s905d_n1.sh                                                                            ## 开始N1打包脚本命令！！！
            sudo chmod -R 777 tmp
            mv tmp/N1-*-70+o.img tmp/N1-lede-70+o.img
            sudo cp files/update-amlogic-openwrt.sh tmp/update-amlogic-openwrt.sh
            cd tmp
            sudo pigz -9 N1-*-70+o.img
            mv -f *.img.gz -t $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/*
            mv -f *.sh -t $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/*
            rm -rf /opt/kernel                                                                               ## 删除根目录下的/opt/kernel目录文件
            
            cd $GITHUB_WORKSPACE                                                                             ## 进入 仓库名称的 执行工作目录（与 openwrt、build 同一目录）
            
            ## N1打包“70+核心”测试版（和70+o打包命令一致）
            sudo chmod  -R 777 /opt
            find N1opt/70+/opt/* -name "*kernel*" | xargs -i cp -r {} /opt
            cp openwrt/bin/targets/*/*/*.tar.gz /opt/kernel/openwrt-armvirt-64-default-rootfs.tar.gz
            cd /opt/kernel
            sudo chmod  -R 777 /opt
            sudo chmod +x *.sh
            sudo ./mk_s905d_n1.sh
            sudo chmod -R 777 tmp
            mv tmp/N1-*-70+.img tmp/N1-lede-70+.img
            sudo cp files/update-amlogic-openwrt.sh tmp/update-amlogic-openwrt.sh
            cd tmp
            sudo pigz -9 N1-*-70+.img
            mv -f *.img.gz -t $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/*
            mv -f *.sh -t $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/*
            rm -rf /opt/kernel
            
            rm -rf $GITHUB_WORKSPACE/N1opt                                                                   ## 已打包完成，删除N1打包源码
        else
            echo "***N1packaging源码目录已存在***"
            
        fi
        
        
        echo "status=success" >>$GITHUB_OUTPUT        # 假如状态反馈成功，则输出到变量
        
    - name: 整理文件                           ## Organize files
      id: organizer
      run: |
        pwd && ls                              # 显示当前步骤的路径和所有文件和文件夹；
        
        mkdir config                                                                                  # 创建config文件夹
        find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config               # 搜索目录中“config.buildinfo”文件，并移动至刚创建的 config 文件夹内 （-f =强制移动）
        
        if [ -n "$(ls -A "openwrt/bin/targets/x86" 2>/dev/null)" ]; then                              # 搜索含有“kernel”名称的核心文件 并移动至targets目录内（只搜索X86固件的核心）
         find openwrt/bin/targets/x86/* -name "*kernel*" | xargs -i mv -f {} openwrt/bin/targets
        fi
        
        cd openwrt/bin/targets/*/*                                                                     # 切换到固件输出目录下
        
        rm -rf packages && mkdir packages                                                              # 删除“packages”文件夹，再新创建“packages”文件夹（存放无用的文件，等会删除）
        find -name "*buildinfo*" | xargs -i mv -f {} packages                                          # 搜索“buildinfo”        并移动至新创建的“packages”文件夹内
        find -name "*sha256sums*" | xargs -i mv -f {} packages                                         # 搜索“sha256sums”       并移动至新创建的“packages”文件夹内
        find -name "*manifest*" | xargs -i mv -f {} packages                                           # 搜索“manifest”         并移动至新创建的“packages”文件夹内
        find -name "*vmlinuz*" | xargs -i mv -f {} packages                                            # 搜索“vmlinuz”          并移动至新创建的“packages”文件夹内
        find -name "*Image*" | xargs -i mv -f {} packages                                              # 搜索“Image”            并移动至新创建的“packages”文件夹内
        find -name "*profiles*" | xargs -i mv -f {} packages                                           # 搜索“profiles”         并移动至新创建的“packages”文件夹内
        rm -rf packages                                                                                # 删除“packages”文件夹，只保留重要固件镜像
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV                                                            # = $PWD命令，固件输出的目录 变量为：FIRMWARE
        echo "status=success" >>$GITHUB_OUTPUT                                                         # 假如状态反馈成功，则输出到变量
        
        
        
    - name: 上传.config配置文件              ## 上传到github空间
      uses: actions/upload-artifact@v4       ## https://github.com/actions/upload-artifact
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true' && !cancelled()
      with:
        name: .config_${{ env.NAME2 }}${{ env.NAME1 }}
        path: ./config              # config/.config 第20次
        
        
        
    - name: 上传固件到github空间             ## Upload firmware directory
      uses: actions/upload-artifact@main     ## https://github.com/actions/upload-artifact
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: firmware_${{ env.NAME2 }}${{ env.NAME1 }}_${{ env.date }}
        path: ${{ env.FIRMWARE }}            ## 上传编译后列表中的固件
        
        
        
    - name: 上传固件到奶牛快传               ## Upload firmware to cowtransfer （已失效，需要登录才能上传）
      id: cowtransfer
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        # pwd && ls                            # 显示当前步骤的路径和所有文件和文件夹；
                
        
        curl -fsSL https://git.io/file-transfer | sh                                                     ## 下载执行脚本   项目仓库：https://github.com/Mikubill/transfer
        
        ## -f=连接失败时不显示http错误  s=静音模式。不输出任何东西    S=只输出错误信息（通常与-s共用）   -L=会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        
        pwd && ls   
        cat cowtransfer.log
        
        echo "::warning file=奶牛快传（${{matrix.target}}）::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
        
        
        
        # curl -fsSL git.io/file-transfer | sh
        # ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        # echo "::warning file=奶牛快传（${{matrix.target}}）::$(cat cowtransfer.log | grep https)"
        # echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"     # 被弃用      ## 解决方法：https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        # set-output被弃用解决方法： https://www.right.com.cn/forum/thread-8271912-1-1.html
        
        
        
    - name: 上传固件到WeTransfer          ## Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        pwd && ls                            # 显示当前步骤的路径和所有文件和文件夹；
        
        curl -fsSL https://git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=WeTransfer链接（${{matrix.target}}）::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
        
        
    - name: 上传到SSH服务器               ##Deploy files to server
      uses: easingthemes/ssh-deploy@main
      continue-on-error: true             ## 出错时继续执行
      if: env.SSH_PRIVATE_KEY && ! contains(github.event.action, 'noser')
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: ${{ env.FIRMWARE }}                      ## 上传的原目录（多个源应以空格分隔。）
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}          ## 远程主机
        REMOTE_USER: ${{ secrets.REMOTE_USER }}          ## 远程用户
        TARGET: ${{ secrets.REMOTE_TARGET }}             ## 目标目录   默认："/www/wwwroot/op.supes.top/firmware/${{matrix.target}}/"
        
        
        
    - name: 提取「奶牛快传」&「WeTransfer」下载链接       ## 自动提取链接
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        pwd && ls                            # 显示当前步骤的路径和所有文件和文件夹；
        
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        
        echo "COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV
        
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV



#--------------------------------------------
#    - name: 生成发布标签 #Generate release tag
#      id: tag
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      run: |
#        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
#        touch release.txt
#        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
#        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
#        echo "::set-output name=status::success"
#--------------------------------------------



    - name: 发布固件                         ## 自动发布固件 releases主页下载
      uses: softprops/action-gh-release@v2   ## https://github.com/softprops/action-gh-release
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.date1 }} 「 ${{matrix.target}} 」固件#${{env.Run_number}}        ## 最大字号的标题
        tag_name: ${{ env.date2 }}           ## 左侧标签页时间
        body: |                              ## 文本显示
            ☆  源码 : ${{ env.REPO_URL }}
            ☆  分支 : ${{ env.REPO_BRANCH }}
            ☆  感谢源码作者[ ${{ env.ZUOZHE }}大神 ]无私分享！
            
            🎉 [ ${{matrix.target}} ]固件下载 ✨
            -
            💐 奶牛快传(国内高速🚀下载)： ${{ env.COWTRANSFER_URL }}
            
            ⛄ WeTransfer(国外高速🚀下载)： ${{ env.WETRANSFER_URL }}
            
            🌴 链接有效期为7天，无需注册直接下载 🐤
        files: ${{ env.FIRMWARE }}/*         ## 上传生成的所有固件
        
        
        
    - name: 删除工作流运行                            ## Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main        ## GitRML/delete-workflow-runs@v2 已经停更     改为： https://github.com/Mattraks/delete-workflow-runs
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}   ## 执行当前仓库
        retain_days: 1            ## 保留天数（默认是1）
        keep_minimum_runs: 8     ## 保存最少运行数（默认是3）
        
        
        
    - name: 删除旧版本            ## Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4          ## https://github.com/dev-drprasad/delete-older-releases
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3           ## 保留最少数（默认是3）
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        
        
        
    # - name: 结束编译_微信通知
      # uses: emon100/Action-Serverchan@v2
      # if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')
      # with:
        # SCKEY: ${{ secrets.SCKEY }}
        # text: 恭喜！${{env.CangKu}}仓库的#${{env.Run_number}}号[${{matrix.target}}]编译成功啦！
        # desp: 我亲爱的主人您编译的[${{matrix.target}}]机型文件中的${{ env.NAME2 }} ${{ env.NAME1 }}固件顺利编译完成了！
        
        
              # 完成时间：${{ env.date1 }}
              
              
              # 仓库名称：${{env.CangKu}}
              
              
              # 工作流号：#${{env.Run_number}}号
              
              
              # 固件名称：${{matrix.target}}

              
              # 奶牛快传：${{ env.COWTRANSFER_URL }}
              
              
              # WeTransfer：${{ env.WETRANSFER_URL }}
              
              
              # 发布地址：${{ env.GITURL }}/releases
              

              # 祝小主人见人爱，花见花开，车见车载，天天好心情🎈！！！


    - name: 电报通知 #Telegram notification
      if: env.TELEGRAM_BOT_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        [ steps.compile.outputs.status == 'success' ] && curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 OpenWrt ${{ env.date3 }} ${{matrix.target}} 编译成功 😋  https://op.supes.top/firmware/${{matrix.target}}/  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" || curl -k --data chat_id="${{ secrets.TELEGRAM_TO }}" --data "text=❌ OpenWrt ${{ env.date3 }} ${{matrix.target}} 编译失败 😂" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"


